#!/bin/bash
# We must run this script as root
if [ "$USER" != "root" ]; then
        echo "Must be root to execute script..."
        exit 1
fi

# Check for valid IP.  Warn if only configured to 127.0.x.x
my_fqdn=`hostname -f`
my_host_ip=`grep $my_fqdn /etc/hosts | awk '{ print $1 }'`
echo ""
echo "Your fully qualified hostname is "$my_fqdn
echo "and your IP is "$my_host_ip
if [ "$my_host_ip" = "127.0.1.1" ] || [ "$my_host_ip" = "127.0.0.1" ]; then
	echo ""
	echo "You should really make your hostname resolve to a valid network IP."
	echo "This is required for many web apps and is generally a good idea."
	echo "To do this:"
	echo "1) edit your /etc/hosts file and make sure your hostname"
	echo "   resolves to an IP other than 127.x.x.x"
	echo "2) Your /etc/network/interfaces will need to match. eg. :"
	echo "   iface eth0 inet static"
	echo "     address 192.168.1.120"
	echo "     netmask 255.255.255.0"
	echo "     gateway 192.168.1.1"
	echo "To make this take effect : killall dhclient;ifdown eth0;ifup eth0"
	echo "'Ctrl-C' to exit or hit <enter> to continue..."
	read my_dummy_value 
fi

# Install all required packages
# FIXME: should I "pip install python-memcached" instead of using apt-get?
#        I've seen conflicting opinions online about this.
apt-get install python-pip python-dev python-virtualenv python-paramiko memcached python-memcache libapache2-mod-wsgi
pip install fabric

# These next few steps download and deploy webmgr.
cd /var/lib
git clone git://git.osuosl.org/gitolite/ganeti/ganeti_webmgr
cd ganeti_webmgr/
git fetch
git checkout -b tag/0.9.1 0.9.1
fab prod deploy
source bin/activate
cp settings.py.dist settings.py
./manage.py syncdb --migrate
./manage.py rebuild_index
# This command allows manual running of Ganeti Web Manager :
#./manage.py runserver
# NOTE: further configuration changes are made below, which will prevent
#       the server from being run using this command.

# In a production environment to following changes are recommended:

# 1) Memcached or similar cache daemon is recommended for a production server.
cat >> /var/lib/ganeti_webmgr/settings.py <<-EOF
	
	# Use memcached for production
	CACHES = {
	    'default': {
	        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
	        'LOCATION': '127.0.0.1:11211',
	    }
	}
EOF

# 2) Change your SECRET_KEY and WEB_MGR_API_KEY to unique (and hopefully
#    unguessable) strings in your settings.py.
sed -i 's@^SECRET_KEY =.*$@SECRET_KEY = '\'`openssl rand -base64 30|tr -dc _A-Z-a-z-0-9`\''@' ./settings.py
sed -i 's@^WEB_MGR_API_KEY =.*$@WEB_MGR_API_KEY = '\'`openssl rand -base64 30|tr -dc _A-Z-a-z-0-9`\''@' ./settings.py

# 3) Apparently a full rather than a relative path is required
#    for TEMPLATE_DIRS when run by wsgi/apache.
sed -i 's@templates/@/var/lib/ganeti_webmgr/ganeti_web/templates/@' ./settings.py

# 4) We also give a full rather than relative path to our DATABASES file.
sed -i 's@ganeti.db@/var/lib/ganeti_webmgr/ganeti.db@' ./settings.py

# 5) The ganeti.db file and whoosh_index dir read/writable by apache
#    ie. the www-data user (in Debian).
chown -R www-data.www-data /var/lib/ganeti_webmgr/whoosh_index/
chown www-data.www-data /var/lib/ganeti_webmgr/ganeti.db

# 6) Also the "db" directory (which I needed to create must be read/writable
#    by apache.
mkdir db
chown www-data.www-data db

# 7) Configure email settings :
echo "We must ensure the server has the ability to send emails or you have"
echo "access to an SMTP server.  Refer to the django email documentation"
echo "if you have a more complicated setup."
echo "Please enter your mail host:"
read EMAIL_HOST
echo "Please enter your email port (usually 25):"
read EMAIL_PORT
echo "Which address will email from the server appear to have come from?:"
read DEFAULT_FROM_EMAIL
sed -i 's@EMAIL_HOST =.*$@EMAIL_HOST = '\'$EMAIL_HOST\''@' /var/lib/ganeti_webmgr/settings.py
sed -i 's@EMAIL_PORT =.*$@EMAIL_PORT = '\'$EMAIL_PORT\''@' /var/lib/ganeti_webmgr/settings.py
sed -i 's@# DEFAULT_FROM_EMAIL =.*$@DEFAULT_FROM_EMAIL = '\'$DEFAULT_FROM_EMAIL\''@' /var/lib/ganeti_webmgr/settings.py

# 8)  Apache needs to be configured to run ganeti web manager
cat >> /var/lib/ganeti_webmgr/django.wsgi <<-EOF
	import os
	import sys
	
	path = '/var/lib/ganeti_webmgr'
	
	# activate virtualenv
	activate_this = '%s/bin/activate_this.py' % path
	execfile(activate_this, dict(__file__=activate_this))
	
	# add project to path
	if path not in sys.path:
	   sys.path.append(path)
	
	# configure django environment
	os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
	
	import django.core.handlers.wsgi
	application = django.core.handlers.wsgi.WSGIHandler()
EOF

a2enmod wsgi

cat > /etc/apache2/conf.d/ganeti_webmgr.conf <<-EOF
	WSGIScriptAlias /ganeti_webmgr /var/lib/ganeti_webmgr/django.wsgi
	Alias /robots.txt /var/lib/ganeti_webmgr/static/robots.txt
	Alias /favicon.ico /var/lib/ganeti_webmgr/static/favicon.ico
	
	AliasMatch ^/([^/]*\.css) /var/lib/ganeti_webmgr/static/styles/$1
	
	Alias /media/ /var/lib/ganeti_webmgr/media/
	
	<Directory /usr/share/ganeti/ganeti_webmgr/static>
	    Order deny,allow
	    Allow from all
	</Directory>
	
	<Directory /usr/share/ganeti/ganeti_webmgr>
	    Order allow,deny
	    Allow from all
	</Directory>
EOF

#    Set VNC_PROXY to the hostname of your VNC AuthProxy server in settings.py. The VNC AuthProxy does not need to run on the same server as Ganeti Web Manager.
sed -i 's@^VNC_PROXY=.*$@VNC_PROXY='\'`hostname --fqdn`\'':8888@' /var/lib/ganeti_webmgr/settings.py

/etc/init.d/apache2 restart
